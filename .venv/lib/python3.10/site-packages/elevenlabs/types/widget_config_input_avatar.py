# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel, UnionMetadata


class WidgetConfigInputAvatar_Orb(UncheckedBaseModel):
    """
    The avatar of the widget
    """

    type: typing.Literal["orb"] = "orb"
    color_1: typing.Optional[str] = None
    color_2: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class WidgetConfigInputAvatar_Url(UncheckedBaseModel):
    """
    The avatar of the widget
    """

    type: typing.Literal["url"] = "url"
    custom_url: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class WidgetConfigInputAvatar_Image(UncheckedBaseModel):
    """
    The avatar of the widget
    """

    type: typing.Literal["image"] = "image"
    url: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


WidgetConfigInputAvatar = typing_extensions.Annotated[
    typing.Union[WidgetConfigInputAvatar_Orb, WidgetConfigInputAvatar_Url, WidgetConfigInputAvatar_Image],
    UnionMetadata(discriminant="type"),
]
